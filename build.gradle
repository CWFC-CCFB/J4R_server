apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org'

def buildForCapsis4R = findProperty('buildForCapsis4R') ?: 'false'
def capsisPath = findProperty('capsisPath') ?: null

import org.tmatesoft.svn.core.wc.*

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}

repositories {
    mavenCentral()
    mavenLocal()
}


/*
buildscript {
    repositories {
        mavenCentral()
    }
}
*/

println "Using java version " + JavaVersion.current()

sourceSets {
    main {    	
        java {
            srcDirs 'src'            
        }
        
        resources {
			srcDirs= ['src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }

    test {
        java {
            srcDirs 'test'
        }
                
        resources {
			srcDirs= ['test']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }               
}

// make sure to set the compliance to Java 1.8 in the project properties if the Java version is later than 1.8
// make sure to set Java Compiler > Errors Warnings > Deprecated and Restricted API > Forbidden reference to WARNING instead of ERROR
dependencies {
    testImplementation "junit:junit:4.12"    
    
     if (capsisPath != null) {
        println('Using Capsis installation in ' + capsisPath)
        runtimeOnly files("${capsisPath}/class/")
        runtimeOnly fileTree(dir: "${capsisPath}/ext", include: "*.jar")        
    }
}

def getSemVersion = { ->

	def versionStdOut = new ByteArrayOutputStream()

	def cmd = ['gitversion', '/showvariable', 'SemVer']
	
	    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
	        def oscmd = ['cmd', '/c'] + cmd
	        exec {
	        	commandLine oscmd
	        	standardOutput = versionStdOut
        	}
	    
	    } else {
	        def oscmd = ['sh'] + cmd
	        exec {
	        	commandLine oscmd
	    		standardOutput = versionStdOut
    		}
    	}
    
    return versionStdOut.toString().trim()        	
}

 
compileJava {
	project.version=getSemVersion()
	println "Building " + rootProject.name + " v" + project.version
}


test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    maxHeapSize = "2048m"
    
//    exclude '**/ProductionEnvironmentTest.class'
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests (unit tests run using the produced JAR file)'
    group = 'verification'
	dependsOn jar
	
	include '**/*.class'
	
	testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.test.output.classesDirs
        
    // set classpath to test classes + test dependencies + JAR
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) 
    outputs.upToDateWhen { false }
    mustRunAfter test
    maxHeapSize = "2048m"
}

check.dependsOn integrationTest

jar {

    if (capsisPath == null) {
        println "Building standard JAR"
        manifest {
            attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
                    "Specification-Title": "J4R server",
                    "Specification-Version": project.version,
                    "Specification-Vendor": "Canadian Wood Fibre Centre",
                    "Implementation-Title": "J4R server",
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "Canadian Wood Fibre Centre",
                   "Main-Class": "j4r.lang.codetranslator.REnvironment",
                   "Class-Path": "."
                   )

            into ('/') {
                from files(['./README.md', './COPYING.LESSER.txt'])
            }
        }
    } else {
        println "Building JAR including capsis in " + "${capsisPath}"
        manifest {
            attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
                    "Specification-Title": "J4R server",
                    "Specification-Version": project.version,
                    "Specification-Vendor": "Canadian Wood Fibre Centre",
                    "Implementation-Title": "J4R server",
                    "Implementation-Vendor": "Canadian Wood Fibre Centre",
                    "Main-Class": "j4r.lang.codetranslator.REnvironment",
                    // get all files from compileClasspath and prefix them
                    // with /ext and replace ext/class by correct class/ entry into manifest classpath
                    "Class-Path": project.configurations.runtimeClasspath.collect { "ext/" + it.getName() }.join(' ').replace("ext/class", "class/")
            )

            into('/') {
                from files(['./README.md', './COPYING.LESSER.txt'])
            }
        }
    }
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.allJava		
}

task deleteInstallFolder(type: Delete) {
  delete "${installDir}"  
}

task install(type: Copy) {
	description = 'Copies the output jar to installation folder.'
	group = 'build'
	dependsOn jar,deleteInstallFolder,integrationTest
	from configurations.default
	from jar
	into "${installDir}"
}

task installIntoCapsisDirectory(type: Copy) {
    description = 'Copies the output jar to CAPSIS installation folder.'
    group = 'build'
    dependsOn jar,integrationTest
    from configurations.default
    from jar
    doFirst {
        if(capsisPath == null) throw new GradleException("capsisPath property is not set.")
    }
    into "${capsisPath}"
}


 