/*
 *  Build file for gradle
 */


plugins {
    id 'com.palantir.git-version' version '3.0.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(8)
  }
}

repositories {
    mavenCentral()
}


println "Using java version " + JavaVersion.current()

sourceSets {
    main {    	
        java {
            srcDirs 'src'            
        }
        
        resources {
			srcDirs= ['src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }

    test {
        java {
            srcDirs 'test'
        }
                
        resources {
			srcDirs= ['test']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }               
}


configurations {
	j4rImplementation {
		extendsFrom implementation
		description = 'Main implementation'
		canBeResolved = true
	}
}

// make sure to set the compliance to Java 1.8 in the project properties if the Java version is later than 1.8
// make sure to set Java Compiler > Errors Warnings > Deprecated and Restricted API > Forbidden reference to WARNING instead of ERROR
dependencies {
    testImplementation "junit:junit:4.13.2"    
}

compileJava {
	project.version= gitVersion() 
	println "Building " + rootProject.name + " " + project.version
}


test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    maxHeapSize = "2048m"
//    exclude '**/ProductionEnvironmentTest.class'
}

jar {
	println "Building standard JAR"
    manifest {
    	attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
        	"Specification-Title": "J4R server",
            "Specification-Version": project.version,
            "Specification-Vendor": "Canadian Wood Fibre Centre",
            "Implementation-Title": "J4R server",
            "Implementation-Version": project.version,
            "Implementation-Vendor": "Canadian Wood Fibre Centre",
            "Main-Class": "j4r.app.Startup",
		)

        into ('/') {
            from files(['./README.md', './COPYING.LESSER.txt'])
        }
    } 
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.allJava		
}


task integrationTest(type: Test) {
	description = 'Runs the integration tests (unit tests run using the produced JAR file)'
    group = 'verification'
	dependsOn jar
	
	include '**/*.class'
	
	testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.test.output.classesDirs
        
    // set classpath to test classes + test dependencies + JAR
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) 
    outputs.upToDateWhen { false }
    mustRunAfter test
    maxHeapSize = "2048m"
}

check.dependsOn integrationTest


task deleteInstallFolder(type: Delete) {
  delete "../externallibraries/" + rootProject.name
}

task install(type: Copy) {
	description = 'Copies the output jar to installation folder.'
	group = 'build'
	dependsOn deleteInstallFolder,integrationTest
	from configurations.j4rImplementation
	from jar
	into "../externallibraries/" + rootProject.name
	doLast {
        new File("${installDir}", "j4r_server.bat").text = "java -Xmx8000m -cp ./class;./ext/*;./j4r_server-${project.version}.jar j4r.app.Startup -ports 0 -backdoorport 0:0 -public on"
    }
}



 